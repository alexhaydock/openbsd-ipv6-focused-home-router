# Set up some macros
wan = "vio0"
lan = "vio1"

# Define ICMPv4 and ICMPv6 types we'll allow in from the WAN
# See: http://shouldiblockicmp.com/ and RFC 4890 for ICMPv6
# Here we make sure allow all of the ICMPv6 messages which
# RFC 4890 Section 4.3.1 states we MUST not drop.
icmp4_types_all = "{ echoreq unreach timex paramprob }"
icmp6_types_wan = "{ echoreq unreach timex paramprob toobig neighbrsol neighbradv }"

# Define a table with non-routable addresses for both IPv4 and IPv6
# Based on:
#   whois -h whois.ripe.net fltr-martian
#   whois -h whois.ripe.net fltr-martian-v6
table <v4_martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16 \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 \
	 	   203.0.113.0/24 }
table <v6_martians> { 0000::/8 0064:ff9b::/96 0100::/8 0200::/7 \
           0400::/6 0800::/5 1000::/4 2001::/32 2001:0002::/48 \
           2001:0003::/32 2001:10::/28 2001:20::/28 2001:db8::/32 \
           2002::/16 3ffe::/16 4000::/3 5f00::/8 6000::/3 8000::/3 \
           a000::/3 c000::/3 e000::/4 f000::/5 f800::/6 fc00::/7 \
           fe80::/10 fec0::/10 ff00::/8 }

# Set policy for blocked packets to drop and not reject
set block-policy drop

# Enable pflog to matching packets
set loginterface egress

# Do not process any traffic for the loopback interface
set skip on lo

# Normalize network traffic in terms of MTU/MSS
match in all scrub (no-df random-id max-mss 1440)

# Perform NAT44 for IPv4
# Simplified rule based on: https://home.nuug.no/~peter/pftutorial/#32
match out on egress inet nat-to (egress)

# Prevent spoofing
antispoof quick for { egress $lan }
block in quick on egress from <v4_martians> to any
block in quick on egress from <v6_martians> to any
block return out quick on egress from any to <v4_martians>
block return out quick on egress from any to <v6_martians>

# Create queues to manage bufferbloat
# Remember to use the actual bandwidth values of the true WAN uplink on the connection
queue isp_d on $lan flows 1024 bandwidth 68M max 69M qlimit 1024 default
queue isp_u on $wan flows 1024 bandwidth 15M max 16M qlimit 1024 default

# Set default block policy
block all

# Allow outgoing traffic for both LAN and the gateway
pass out quick keep state

# Allow selected ICMPv4 into the router from ANY interface
pass in inet proto icmp icmp-type $icmp4_types_all keep state

# Allow selected ICMPv6 into the router from WAN interface
pass in on $wan inet6 proto icmp6 icmp6-type $icmp6_types_wan keep state

# Allow all ICMPv6 into router from LAN (possibly too trusting, can be hardened if you prefer)
pass in on $lan inet6 proto icmp6 keep state

# Allow traffic in from LAN
# Note: This is quite wide so should be treated as being for illustrative
#       purposes. It works just fine, but you may want to narrow this down
#       to explicitly allow access to the services being hosted on this router.
pass in on $lan keep state

# Configure pf to perform NAT64 translation for packets
# coming in on the LAN interface and destined for
# the NAT64 well-known prefix (64:ff9b::)
#
# We put this rule as last in our firewall due to pf being
# a last-match firewall.
pass in on $lan inet6 from any to 64:ff9b::/96 af-to inet from (egress:0)
